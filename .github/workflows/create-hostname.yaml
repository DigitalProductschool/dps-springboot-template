name: Create hostname
run-name: team's hostname
on: 
  workflow_dispatch:
    inputs:
      hostname:
        description: 'Hostname : e.g. team1.dpschool.app'
        required: true
      provider: 
        description: 'Cloud provider where the ingress is deployed'
        required: true

env:
  TF_DNS_SA: "${{ secrets.TF_DNS_SA }}"
  CONFIG_DIRECTORY: "./deployment/templates/terraform"
  MANAGEMENT_CLUSTER: "dps-idp"
  REGION: "eu-central-1"

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  extract-ingress:
    name: Extract IP and Update tfvars
    runs-on: ubuntu-latest
    outputs:
      FINAL_IP: ${{ steps.FINAL_IP.outputs.FINAL_IP }}
    steps:
      - uses: azure/setup-kubectl@v3
      - name: Create/Verify `.kube` directory
        run: mkdir -p ~/.kube/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
         role-to-assume: arn:aws:iam::197751596333:role/gh-actions-eks-role
         aws-region: ${{ env.REGION }}
      - name: Wait
        run: |
          sleep 240
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.MANAGEMENT_CLUSTER }}
          kubectl wait --for=condition=ready cluster.eks.aws.upbound.io/${{ github.event.repository.name }} --timeout=900s
      - name: Get K8s Cluster Info
        run: |
          while ! KUBECONFIG=~/.kube/kubeconfig.yaml kubectl get secret ${{ github.event.repository.name }}-cluster -n infra; do echo "Waiting for cluster secret."; sleep 1; done
          KUBECONFIG=~/.kube/kubeconfig.yaml kubectl get secret ${{ github.event.repository.name }}-cluster -n infra \
            --output jsonpath="{.data.kubeconfig}" \
            | base64 -d > kubeconfig-${{ github.event.repository.name }}.yaml
      - name: Extract Ingress
        run: |
          kubectl wait --for=condition=ready release ${{ github.event.repository.name }}-ingress --timeout=300s
          while ! KUBECONFIG=kubeconfig-${{ github.event.repository.name }}.yaml kubectl get svc ${{ github.event.repository.name }}-ingress-ingress-nginx-controller -n ingress-nginx; do echo "Waiting for ingress svc."; sleep 1; done
          echo "IP=$(KUBECONFIG=kubeconfig-${{ github.event.repository.name }}.yaml kubectl get svc ${{ github.event.repository.name }}-ingress-ingress-nginx-controller -n ingress-nginx --kubeconfig=kubeconfig-${{ github.event.repository.name }}.yaml | grep LoadBalancer | awk '{print $4}')" >> "$GITHUB_ENV"
      
      - name: Echo Ip
        id: FINAL_IP
        run: |
          if [ "${{ inputs.provider }}" == "aws-official" ] && [ -n "${{ env.IP }}" ]; then
          echo "FINAL_IP=${{ env.IP }}." >> $GITHUB_OUTPUT
          elif [ -n "${{ env.IP }}" ]; then
            echo "FINAL_IP=${{ env.IP }}" >> $GITHUB_OUTPUT
          fi
        
  setup-hostname:
    name: Create hostname
    needs: [extract-ingress]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.CONFIG_DIRECTORY }}
    steps:
        - uses: actions/checkout@v3
          with:
            persist-credentials: false
        
        - uses: hashicorp/setup-terraform@v2
        
        - name: Create backend config file
          run: |
            cat << EOF >> service-account.json
            ${{ env.TF_DNS_SA }}
            EOF
        
        - name: Update prefix
          run: |
           sed -i.bak "s/prefix = \"dns\"/prefix = \"records-${{ github.event.repository.name }}\"/" versions.tf
      
        - name: Terraform Init
          run: terraform init -input=false
          env:
            GOOGLE_APPLICATION_CREDENTIALS: "./service-account.json"
        
        - name: Extract subdomain
          run: |
           if [[ ${{ inputs.hostname }} =~ ^.+\.dpschool\.app$ ]]; then
           subdomain=$(echo ${{ inputs.hostname }} | sed 's/\.dpschool\.app$//')
       
           echo "subdomain extracted: $subdomain"
           echo "SUBDOMAIN=$subdomain" >> "$GITHUB_ENV"
           else
               echo "Invalid domain name. Please enter a domain ending with 'dpschool.app'."
               exit 1 
           fi

        - name: Setup terraform variables
          id: vars
          run: |-
            cat > tf.auto.tfvars <<EOF
            subdomain_prod="${{ env.SUBDOMAIN }}" 
            subdomain_dev="dev.${{ env.SUBDOMAIN }}" 
            ip="${{ needs.extract-ingress.outputs.FINAL_IP }}"
            ingress_provider="${{ inputs.provider }}"
            EOF
      
        - name: Terraform Plan
          id: plan
          run: terraform plan -input=false
          env:
            GOOGLE_APPLICATION_CREDENTIALS: "./service-account.json"
        
        - name: Terraform Apply
          id: apply
          run: terraform apply -auto-approve -input=false
          env:
            GOOGLE_APPLICATION_CREDENTIALS: "./service-account.json"

        - name: Clean backend config file
          run: rm -rf service-account.json

        - name: Commit changes
          run: |
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .
            git commit -m "Update tfvars and prefix ðŸ¤–"

        - name: Push changes
          uses: ad-m/github-push-action@master
          with:
            github_token: ${{ secrets.GH_ACTIONS_BOT_ACCESS_TOKEN}}
            branch: ${{ github.ref }}